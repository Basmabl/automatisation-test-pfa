name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  devsecops-pipeline:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Désactive le shallow clone pour le blame Git

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt pytest pytest-cov

    - name: Run tests and generate coverage
      run: |
          # Crée un fichier test minimal si absent
          if [ ! -f test-model.py ]; then
            echo 'def test_example(): assert True' > test-model.py
          fi
          
          # Analyse TOUT le code Python (pas seulement test-model.py)
          pytest --cov=. --cov-report=xml:sonar-coverage.xml --junitxml=test-report.xml
          
          # Vérifie que la couverture atteint au moins 80%
          python -c "import xml.etree.ElementTree as ET; cov = ET.parse('sonar-coverage.xml'); exit(1 if float(cov.find('.//line-rate').text) < 0.8 else 0)"
          
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      with:
        args: >
          -Dsonar.projectKey=Basmabl_automatisation-test-pfa
          -Dsonar.organization=basmabl
          -Dsonar.python.version=3.13
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.sources=.
          -Dsonar.exclusions=venv/**,**/__pycache__/**
          -Dsonar.python.coverage.reportPaths=sonar-coverage.xml
          -Dsonar.python.xunit.reportPaths=test-report.xml
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}